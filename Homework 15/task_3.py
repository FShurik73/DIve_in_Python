# üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2. 
# üìå–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ: ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞), ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞, ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

import logging
from functools import wraps
from typing import Callable

logger = logging.getLogger(__name__)
my_format = '{levelname:<10} - {asctime:<20} - {funcName} - {msg}'
logging.basicConfig(filename='mylog.log', filemode='a', encoding='UTF-8',
level=logging.INFO, style='{', format=my_format)


def decor(func: Callable) -> Callable:
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)

        delimiter = ', ' if args and kwargs else ''
        args_kwargs = f'{delimiter}'.join([f'args: {args}' if args else '',
                    f'kwargs: {kwargs}' if kwargs else ''])

        logger.info(msg=f'result: {result}, {args_kwargs}')
        return result

    return wrapper


@decor
def some_func(a: str, b: str):
    return a + '_' + b


some_func('–ø–µ—Ä–≤–∞—è', '–≤—Ç–æ—Ä–∞—è')
some_func('–ø–µ—Ä–≤–∞—è', b='–≤—Ç–æ—Ä–∞—è')
some_func(b='–≤—Ç–æ—Ä–∞—è', a='–ø–µ—Ä–≤–∞—è')

