# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: 
# ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø. 
# üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É. 
# üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

import datetime
import logging

# logger = logging.getLogger(__name__)
# my_format = '{levelname:<10} - {asctime:<20} - {funcName} - {msg}'
# logging.basicConfig(filename='mylog.log', filemode='a', encoding='UTF-8',
#                     level=logging.INFO, style='{', format=my_format)


# WEEKDAYS = {
#     '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
#     '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
#     '—Å—Ä–µ–¥–∞': 2,
#     '—á–µ—Ç–≤–µ—Ä–≥': 3,
#     '–ø—è—Ç–Ω–∏—Ü–∞': 4,
#     '—Å—É–±–±–æ—Ç–∞': 5,
#     '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
# }

# MOUNTHS = {
#     '—è–Ω–≤–∞—Ä—å': 1,
#     '—Ñ–µ–≤—Ä–∞–ª—å': 2,
#     '–º–∞—Ä—Ç': 3,
#     '–∞–ø—Ä–µ–ª—å': 4,
#     '–º–∞–∏ÃÜ': 5,
#     '–∏—é–Ω—å': 6,
#     '–∏—é–ª—å': 7,
#     '–∞–≤–≥—É—Å—Ç': 8,
#     '—Å–µ–Ω—Ç—è–±—Ä—å': 9,
#     '–æ–∫—Ç—è–±—Ä—å': 10,
#     '–Ω–æ—è–±—Ä—å': 11,
#     '–¥–µ–∫–∞–±—Ä—å': 12
# }


# def func(data: str) -> datetime.date:
#     """
#     –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
#     –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
#     """
#     cnt, weekday_, month_ = data.split(' ')
#     try:
#         cnt = int(cnt.split('-')[0])
#         if 0 < cnt < 6:
#             logger.error(msg='–ù–µ –≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏: {data}')
#     except ValueError as e:
#         logger.error(msg=e)
     

#     for k, v in WEEKDAYS.items():
#         if weekday_[:4] in k:
#             weekday_ = v
#             break
#     else:
#         logger.error(msg='–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏: {data}')

#     for k, v in MOUNTHS.items():
#         if month_[:3]in k:
#             month_ = v
#             break
#     else:
#         logger.error(msg='–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞: {data}')    

#     cur_year = datetime.datetime.now().year

#     start = 1
#     for i in range(7):
#         first_month_weekday = datetime.date(year=cur_year, month=month_, day=start + i).weekday()
#         if first_month_weekday == weekday_:
#             day_ = first_month_weekday + (7 * (cnt - 1)) - 1
#             return datetime.date(year=cur_year, month=month_, day=day_)   
# print(func('5-–π —á–µ—Ç–≤–µ—Ä–≥ –∏—é–Ω—è'))  


# __________________________________________________________________________________


logger = logging.getLogger(__name__)
my_format = '{levelname:<10} - {asctime:<20} - {funcName} - {msg}'
logging.basicConfig(filename='mylog.log', filemode='a', encoding='UTF-8',
level=logging.INFO, style='{', format=my_format)

WEEKDAYS = {
'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
'–≤—Ç–æ—Ä–Ω–∏–∫': 1,
'—Å—Ä–µ–¥–∞': 2,
'—á–µ—Ç–≤–µ—Ä–≥': 3,
'–ø—è—Ç–Ω–∏—Ü–∞': 4,
'—Å—É–±–±–æ—Ç–∞': 5,
'–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
}

MONTHS = {
'—è–Ω–≤': 1,
'—Ñ–µ–≤': 2,
'–º–∞—Ä': 3,
'–∞–ø—Ä': 4,
'–º–∞': 5,
'–∏—é–Ω': 6,
'–∏—é–ª': 7,
'–∞–≤–≥': 8,
'—Å–µ–Ω': 9,
'–æ–∫—Ç': 10,
'–Ω–æ—è': 11,
'–¥–µ–∫': 12
}


def func(data: str) -> datetime.date:
    try:
        cnt, weekday_, month_ = data.split(' ')
    except Exception as e:
        logger.error(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {data}')

    try:
        cnt = int(cnt.split('-')[0])
        if 0 < cnt < 6:
            logger.error(msg=f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ –º–µ—Å—è—Ü–µ: {data}')
    except ValueError as e:
        logger.error(msg=e)

    for k, v in WEEKDAYS.items():
        if weekday_[:4] in k:
            weekday_ = v
            break
    else:
        logger.error(msg=f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏: {data}')

    for k, v in MONTHS.items():
        if k in month_:
            month_ = v
            break
    else:
        logger.error(msg=f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞: {data}')

    cur_year = datetime.datetime.now().year

    first_month_weekday = datetime.date(year=cur_year, month=month_, day=1)
    offset = 1 if weekday_ < first_month_weekday.weekday() else 0

    for i in range(7):
        data_delta = first_month_weekday + datetime.timedelta(days=i)
        if data_delta.weekday() == weekday_:
            day_ = data_delta.replace(day=data_delta.day + (7 * (cnt - 1)))
    return day_


print(func('2-—è —Å—Ä–µ–¥–∞ –º–∞—è'))